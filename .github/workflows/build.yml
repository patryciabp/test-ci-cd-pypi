# This is a basic workflow to help you get started with Actions

name: Build on push-pull_request

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  black-formatting-check:
    name: Check formatting
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-python@v2.2.2
      - uses: psf/black@stable
  build:
    # The type of runner that the job will run on
    name: Build tool
    runs-on: ${{ matrix.os }}
    needs: black-formatting-check
    strategy:
        matrix:
          os:
            - 'ubuntu-latest'
            - 'macos-latest'
            - 'windows-latest'
          python-version:
            - '3.7'
            - '3.8'
            - '3.9'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
        # Perma-cache Poetry since we only need it for checking pyproject version
        - name: Cache Poetry
          id: cache-poetry
          uses: actions/cache@v2.1.6
          with:
            path: ~/.poetry
            key: ${{ matrix.os }}-poetry
        # Only runs when key from caching step changes
        - name: Install latest version of Poetry
          if: steps.cache-poetry.outputs.cache-hit != 'true'
          run: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
        # Poetry still needs to be re-prepended to the PATH on each run, since
      - name: Add Poetry to path
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Get Poetry version
        run: poetry --version
      - name: Check pyproject.toml validity
        run: poetry check --no-interaction
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2.1.6
        with:
          path: ${{github.workspace}}/.venv
          key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ matrix.os }}-
      - name: Install deps
        if: steps.cache-deps.cache-hit != 'true'
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
      - name: Run a test script
        run: poetry run test
      - name: Build artifacts
        run: poetry build
